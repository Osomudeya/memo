version: '3.8'

services:
  # Frontend - Vanilla JS with Nginx
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
    volumes:
      - ./frontend/src:/app/src:ro
    networks:
      - humor-game-network

  # Backend - Node.js API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=humor_memory_game
      - DB_USER=gameuser
      - DB_PASSWORD=gamepass123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - humor-game-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: humor_memory_game
      POSTGRES_USER: gameuser
      POSTGRES_PASSWORD: gamepass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/combined-init.sql:/docker-entrypoint-initdb.d/01-combined-init.sql
    networks:
      - humor-game-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameuser -d humor_memory_game"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - humor-game-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

networks:
  humor-game-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local